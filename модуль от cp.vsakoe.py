# ---------------------------------------------------------------------------------
#  /\_/\  üåê –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –∫–∞–Ω–∞–ª–æ–º @hikktutor
# ---------------------------------------------------------------------------------
# Name: autoprofile
# Description: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
# –ê–≤—Ç–æ—Ä: GeekTG
# –ü–µ—Ä–µ–≤–æ–¥:@hikktutor
# .autopfp      | .stopautopfp | .autobio | .stopautobio | .autoname
# .stopautoname | .delpfp
# ---------------------------------------------------------------------------------


# -*- coding: utf-8 -*-

import ast
import asyncio
import time
from io import BytesIO

from telethon.tl import functions

from .. import loader, utils

try:
    from PIL import Image
except ImportError:
    pil_installed = False
else:
    pil_installed = True


@loader.tds
class AutoProfileMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    –ø–µ—Ä–µ–≤–æ–¥ @hikktutor"""

    strings = {
        "name": "Automatic Profile",
        "missing_pil": "<b>–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Pillow </b>",
        "missing_pfp": "<b>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è </b>",
        "invalid_args": "<b>–û—Ç—Å—É—Ç—Å—Ç–≤—É—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</b>",
        "invalid_degrees": (
            "<b>–ù–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–¥—É—Å–æ–≤ –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞</b>"
        ),
        "invalid_delete": (
            "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, —É–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–µ—Ç</b>"
        ),
        "enabled_pfp": "<b>–í–∫–ª—é—á–µ–Ω –ø–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è</b>",
        "pfp_not_enabled": "<b> –ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –≤–∫–ª—é—á–µ–Ω</b>",
        "pfp_disabled": "<b>–ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–∫–ª—é—á–µ–Ω</b>",
        "missing_time": "<b>–í—Ä–µ–º—è –Ω–µ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –≤ –±–∏–æ</b>",
        "enabled_bio": "<b>–ë–∏–æ —á–∞—Å—ã –≤–∫–ª—é—á–µ–Ω—ã</b>",
        "bio_not_enabled": "<b>–ë–∏–æ —á–∞—Å—ã –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã</b>",
        "disabled_bio": "<b>–ë–∏–æ —á–∞—Å—ã –≤—ã–∫–ª—é—á–µ–Ω—ã</b>",
        "enabled_name": "<b>–ß–∞—Å—ã –≤ –Ω–∏–∫–µ –≤–∫–ª—é—á–µ–Ω—ã</b>",
        "name_not_enabled": "<b>–ß–∞—Å—ã –≤ –Ω–∏–∫–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã</b>",
        "disabled_name": "<b>–ß–∞—Å—ã –≤ –Ω–∏–∫–µ –≤—ã–∫–ª—é—á–µ–Ω—ã</b>",
        "how_many_pfps": (
            "<b>–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –∞–≤–∞—Ç–∞—Ä–æ–∫ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å</b>"
        ),
        "invalid_pfp_count": "<b>–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤–∞—Ç–∞—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
        "removed_pfps": "<b>–£–¥–∞–ª–µ–Ω–æ {} –∞–≤–∞—Ç–∞—Ä–æ–∫</b>",
    }

    def __init__(self):
        self.client = None
        self.bio_enabled = False
        self.name_enabled = False
        self.pfp_enabled = False
        self.raw_bio = None
        self.raw_name = None

    async def client_ready(self, client, db):
        self.client = client

    async def autopfpcmd(self, message):
        """–ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ x –≥—Ä–∞–¥—É—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        .autopfp <–≥—Ä–∞–¥—É—Å—ã> <remove previous (last pfp)>

        –≥—Ä–∞–¥—É—Å—ã - 60, -10, etc
        –£–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π pfp - –¥–∞/1/–Ω–µ—Ç/0, —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞"""

        if not pil_installed:
            return await utils.answer(message, self.strings("missing_pil", message))

        if not await self.client.get_profile_photos("me", limit=1):
            return await utils.answer(message, self.strings("missing_pfp", message))

        msg = utils.get_args(message)
        if len(msg) != 2:
            return await utils.answer(message, self.strings("invalid_args", message))

        try:
            degrees = int(msg[0])
        except ValueError:
            return await utils.answer(message, self.strings("invalid_degrees", message))

        try:
            delete_previous = ast.literal_eval(msg[1])
        except (ValueError, SyntaxError):
            return await utils.answer(message, self.strings("invalid_delete", message))

        with BytesIO() as pfp:
            await self.client.download_profile_photo("me", file=pfp)
            raw_pfp = Image.open(pfp)

            self.pfp_enabled = True
            pfp_degree = 0
            await self.allmodules.log("start_autopfp")
            await utils.answer(message, self.strings("enabled_pfp", message))

            while self.pfp_enabled:
                pfp_degree = (pfp_degree + degrees) % 360
                rotated = raw_pfp.rotate(pfp_degree)
                with BytesIO() as buf:
                    rotated.save(buf, format="JPEG")
                    buf.seek(0)

                    if delete_previous:
                        await self.client(
                            functions.photos.DeletePhotosRequest(
                                await self.client.get_profile_photos("me", limit=1)
                            )
                        )

                    await self.client(
                        functions.photos.UploadProfilePhotoRequest(
                            await self.client.upload_file(buf)
                        )
                    )
                    buf.close()
                await asyncio.sleep(60)

    async def stopautopfpcmd(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã –±–∏–æ."""

        if self.pfp_enabled is False:
            return await utils.answer(message, self.strings("pfp_not_enabled", message))
        self.pfp_enabled = False

        await self.client(
            functions.photos.DeletePhotosRequest(
                await self.client.get_profile_photos("me", limit=1)
            )
        )
        await self.allmodules.log("stop_autopfp")
        await utils.answer(message, self.strings("pfp_disabled", message))

    async def autobiocmd(self, message):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ—Ç –±–∏–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        .autobio '<message, time as {time}>'"""

        msg = utils.get_args(message)
        if len(msg) != 1:
            return await utils.answer(message, self.strings("invalid_args", message))
        raw_bio = msg[0]
        if "{time}" not in raw_bio:
            return await utils.answer(message, self.strings("missing_time", message))

        self.bio_enabled = True
        self.raw_bio = raw_bio
        await self.allmodules.log("start_autobio")
        await utils.answer(message, self.strings("enabled_bio", message))

        while self.bio_enabled:
            current_time = time.strftime("%H:%M")
            bio = raw_bio.format(time=current_time)
            await self.client(functions.account.UpdateProfileRequest(about=bio))
            await asyncio.sleep(60)

    async def stopautobiocmd(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–±–∏–æ–≥—Ä–∞—Ñ–∏—é cmd."""

        if self.bio_enabled is False:
            return await utils.answer(message, self.strings("bio_not_enabled", message))
        self.bio_enabled = False
        await self.allmodules.log("stop_autobio")
        await utils.answer(message, self.strings("disabled_bio", message))
        await self.client(
            functions.account.UpdateProfileRequest(about=self.raw_bio.format(time=""))
        )

    async def autonamecmd(self, message):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ—Ç –≤–∞—à–µ –∏–º—è Telegram —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        .autoname '<—Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—Ä–µ–º—è –∫–∞–∫ {time}>'"""

        msg = utils.get_args(message)
        if len(msg) != 1:
            return await utils.answer(message, self.strings("invalid_args", message))
        raw_name = msg[0]
        if "{time}" not in raw_name:
            return await utils.answer(message, self.strings("missing_time", message))

        self.name_enabled = True
        self.raw_name = raw_name
        await self.allmodules.log("start_autoname")
        await utils.answer(message, self.strings("enabled_name", message))

        while self.name_enabled:
            current_time = time.strftime("%H:%M")
            name = raw_name.format(time=current_time)
            await self.client(functions.account.UpdateProfileRequest(first_name=name))
            await asyncio.sleep(60)

    async def stopautonamecmd(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É autoname."""

        if self.name_enabled is False:
            return await utils.answer(
                message, self.strings("name_not_enabled", message)
            )
        self.name_enabled = False
        await self.allmodules.log("stop_autoname")
        await utils.answer(message, self.strings("disabled_name", message))
        await self.client(
            functions.account.UpdateProfileRequest(
                first_name=self.raw_name.format(time="")
            )
        )

    async def delpfpcmd(self, message):
        """–£–¥–∞–ª–∏—Ç—å x-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(—è) –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
        .delpfp <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤/–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ>"""

        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, self.strings("how_many_pfps", message))
        try:
            pfps_count = int(args[0])
        except ValueError:
            return await utils.answer(
                message, self.strings("invalid_pfp_count", message)
            )
        if pfps_count < 0:
            return await utils.answer(
                message, self.strings("invalid_pfp_count", message)
            )
        if pfps_count == 0:
            pfps_count = None

        to_delete = await self.client.get_profile_photos("me", limit=pfps_count)
        await self.client(functions.photos.DeletePhotosRequest(to_delete))

        await self.allmodules.log("delpfp")
        await utils.answer(
            message, self.strings("removed_pfps", message).format(len(to_delete))
        )
        return await utils.answer(message, self.strings("how_many_pfps", message))